@using CodeNest.UI.Resources
@model CodeNest.DTO.Models.UserWorkspaceFilesDto
@inject IHttpContextAccessor _httpContextAccessor

<div class="container-fluid text-center">
    <div class="card">
        <div class="card-header">
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success" role="alert" id="tempDataMessage" style="display: none;">
                    @TempData["Success"]
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger" role="alert" id="tempDataMessage" style="display: none;">
                    @TempData["Error"]
                </div>
            }
        </div>
        <div class="card-body">
            <form id="jsonForm" method="post">
                <input type="hidden" name="UserId" value="@Model.UserId" />
                <input type="hidden" name="WorkspaceId" value="@Model.WorkspaceId" />
                <input type="hidden" name="BlobId" value="@Model?.Blob?.Id" />
                <input type="hidden" name="Blob.Type" value="@Resource.CN_Type_001" />
                <div class="row">
                    <!-- Input JSON Data Column -->
                    <div class="col-5">
                        <div class="d-flex justify-content-lg-start mb-3">
                            <button id="copyInputJsonBtn" type="button" class="btn btn-primary mx-1" data-bs-toggle="tooltip" title="Copy Input JSON">
                                <i class="fas fa-copy"></i>
                            </button>
                            <button id="fileUploadBtn" type="button" class="btn btn-primary mx-1" data-bs-toggle="tooltip" title="Upload JSON File" onclick="document.getElementById('fileInput').click()">
                                <i class="fas fa-upload"></i>
                            </button>
                            <input type="file" id="fileInput" accept=".json" style="display: none;" onchange="loadJsonFile()">
                            <button id="minifyUndoBtn" type="button" class="btn btn-primary mx-1" onclick="minifyOrUndo()" data-bs-toggle="tooltip" title="Minify JSON">
                                <i class="fas fa-compress"></i>
                            </button>
                            <button id="clearBtn" type="button" class="btn btn-primary mx-1" onclick="clearJson()" data-bs-toggle="tooltip" title="Clear JSON">
                                <i class="fas fa-eraser"></i>
                            </button>
                        </div>
                        <textarea id="inputJson" name="Blob.Input" rows="22" class="form-control" style="resize: none;" placeholder="Enter JSON data" required>@Model?.Blob?.Input</textarea>
                    </div>

                    <!-- Actions Column -->
                    <div class="col-2">
                        <h5></h5>
                        <br />
                        <br />
                        <br />
                        <button id="validateBtn" asp-action="JsonFormatter" type="submit" class="btn btn-primary mb-2 w-100">Validate</button>
                        @if (Model?.BlobId != null)
                        {
                            <button asp-action="Update" asp-controller="Formatter" type="submit" class="btn btn-primary w-100">Update</button>
                        }
                        else
                        {
                            <button id="saveJsonBtn" type="button" class="btn btn-primary w-100" onclick="checkWorkspaceAndSave()">Save</button>
                        }
                    </div>

                    <!-- Formatted JSON Data Column -->
                    <div class="col-5">
                        <div class="d-flex justify-content-lg-start mb-3">
                            <button id="copyFormattedJsonBtn" type="button" class="btn btn-primary mx-1" data-bs-toggle="tooltip" title="Copy Input JSON">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                        <textarea id="formattedJson" name="Blob.Output" rows="22" class="form-control" style="resize: none;" placeholder="Formatted JSON will appear here">@Model?.Blob?.Output</textarea>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="filenameInputModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filenameInputModalTitle">Enter Filename</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col mb-6">
                        <label class="form-label">Filename</label>
                        <input type="text" id="filenameInput" class="form-control" placeholder="Enter the Filename" required>
                        <span class="text-danger" id="filenameError"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveJsonWithFilename()">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        // Function to load and read the JSON file
        function loadJsonFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];

            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    try {
                        const jsonContent = e.target.result;
                        // Assuming the JSON is well-formed, you can parse it if needed
                        // const parsedJson = JSON.parse(jsonContent); // Uncomment if needed
                        document.getElementById('inputJson').value = jsonContent; // Populate the textarea
                    } catch (error) {
                        alert('Error reading the JSON file: ' + error.message);
                    }
                };

                reader.onerror = function () {
                    alert('Error reading the file');
                };

                reader.readAsText(file); // Read the file as text
            }
        }
        let originalJson = ""; // Variable to store original JSON for undo functionality

        function checkWorkspaceAndSave() {
            var userId = document.querySelector('input[name="UserId"]').value;
            var workspaceId = document.querySelector('input[name="WorkspaceId"]').value;
            var inputJson = document.getElementById('inputJson').value;
            var outputJson = document.getElementById('formattedJson').value;

            // Store values in a global object for later use
            window.jsonDataToSave = {
                userId: userId,
                workspaceId: workspaceId,
                inputJson: inputJson,
                outputJson: outputJson,
                Type: '@Resource.CN_Type_001'
            };

            // Show the filename input modal
            var filenameInputModal = new bootstrap.Modal(document.getElementById('filenameInputModal'));
            filenameInputModal.show();
        }

        function saveJsonWithFilename() {
            var filename = document.getElementById('filenameInput').value;
            var filenameError = document.getElementById('filenameError');

            if (!filename) {
                filenameError.textContent = "Filename is required.";
                return;
            } else {
                filenameError.textContent = "";
            }

            var formData = new FormData();
            formData.append("UserId", window.jsonDataToSave.userId);
            formData.append("WorkspaceId", window.jsonDataToSave.workspaceId);
            formData.append("Blob.Type", window.jsonDataToSave.Type);
            formData.append("Blob.Input", window.jsonDataToSave.inputJson);
            formData.append("Blob.Output", window.jsonDataToSave.outputJson);
            formData.append("Filename", filename);

            fetch('/Formatter/Save', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                        showTempDataMessage("Saved successfully.", "alert-success");
                    } else {
                        showTempDataMessage("Error occurred: " + data.message, "alert-danger");
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showTempDataMessage("An error occurred while saving.", "alert-danger");
                });

            // Hide the modal after saving
            var filenameInputModal = bootstrap.Modal.getInstance(document.getElementById('filenameInputModal'));
            filenameInputModal.hide();
        }

        function showTempDataMessage(message, alertClass) {
            const tempDataMessageElement = document.getElementById('tempDataMessage');
            tempDataMessageElement.className = 'alert ' + alertClass;
            tempDataMessageElement.textContent = message;
            tempDataMessageElement.style.display = 'block';
        }

        function minifyOrUndo() {
            const inputJson = document.getElementById('inputJson');
            if (inputJson.value && inputJson.value !== originalJson) {
                // If original JSON is not set, minify
                if (!originalJson) {
                    originalJson = inputJson.value; // Save original JSON
                    try {
                        const minifiedJson = JSON.stringify(JSON.parse(originalJson));
                        inputJson.value = minifiedJson;
                        /* document.getElementById('formattedJson').value = minifiedJson; */ // Optionally set the formattedJson as well
                        // Change button text to "Undo"
                        //showTempDataMessage("JSON minified successfully.", "alert-success");
                    } catch (e) {
                        showTempDataMessage('Invalid JSON data', 'alert-danger');
                    }
                } else {
                    // If original JSON is already set, undo
                    inputJson.value = originalJson; // Restore original JSON
                    document.getElementById('formattedJson').value = ''; // Clear formatted JSON
                    originalJson = ""; // Clear the stored original JSON
                    document.getElementById('minifyUndoBtn').textContent = "Minify"; // Change button text back to "Minify"
                    //showTempDataMessage("Minification undone.", "alert-success");
                }
            } else {
                showTempDataMessage('No JSON data to minify or undo.', 'alert-danger');
            }
        }

        function clearJson() {
            document.getElementById('inputJson').value = '';
            document.getElementById('formattedJson').value = '';
            originalJson = ""; // Clear original JSON on clear
            document.getElementById('minifyUndoBtn').textContent = "Minify"; // Reset button text
        }

        function copyToClipboard(textAreaId) {
            const textArea = document.getElementById(textAreaId);
            textArea.select();
            document.execCommand('copy');
            showTempDataMessage(`${textAreaId === 'inputJson' ? 'Input' : 'Formatted'} JSON copied to clipboard.`, 'alert-success');
        }
    </script>
}

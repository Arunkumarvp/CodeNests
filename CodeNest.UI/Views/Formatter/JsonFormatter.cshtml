@using CodeNest.UI.Enum
@model CodeNest.DTO.Models.UserWorkspaceFilesDto
@inject IHttpContextAccessor _httpContextAccessor
@{
    Console.WriteLine(Model);
}
<div class="container-fluid text-center">
    <div class="card">
        <div class="card-header">
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success" role="alert">
                    @TempData["Success"]
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger" role="alert">
                    @TempData["Error"]
                </div>
            }
        </div>
        <div class="card-body">
            <form id="jsonForm" method="post">
                <input type="hidden" name="UserId" value="@Model.UserId" />
                <input type="hidden" name="WorkspaceId" value="@Model.WorkspaceId" />
                <input type="hidden" name="BlobId" value="@Model?.Blob?.Id" />
                <input type="hidden" name="Blob.Type" value="json" />
                <div class="row">
                    <!-- Input JSON Data Column -->
                    <div class="col-5">
                        <h5>Input JSON</h5>
                            <textarea id="inputJson" name="Blob.Input" class="form-control" placeholder="Enter JSON data" required style="width: 100%; height: 500px; resize: none;">@Model?.Blob?.Input</textarea>                        <div class="mt-2 d-flex justify-content-between">
                            <button id="copyInputJsonBtn" type="button" class="btn btn-primary" data-bs-toggle="tooltip" title="Copy the JSON from the input field">Copy Input JSON</button>
                            <button class="btn btn-primary" id="fileUploadBtn" type="button" onclick="document.getElementById('fileInput').click()" data-bs-toggle="tooltip" title="Upload a JSON file">File Upload</button>
                            <input type="file" id="fileInput" accept=".json" style="display: none;" onchange="loadJsonFile()">
                        </div>
                    </div>

                    <!-- Actions Column -->
                    <div class="col-2">
                        <h5></h5>
                        <br />
                        <br />
                        <br />
                        <button id="validateBtn" asp-action="JsonFormatter" type="submit" class="btn btn-primary mb-2 w-100" data-bs-toggle="tooltip" title="Validate the input JSON">Validate</button>
                        <button id="minifyUndoBtn" type="button" class="btn btn-primary mb-2 w-100" onclick="toggleMinifyUndo()" data-bs-toggle="tooltip" title="Minify or undo the JSON format">Minify</button>
                        <button id="clearBtn" type="button" class="btn btn-primary mb-2 w-100" onclick="clearJson()" data-bs-toggle="tooltip" title="Clear the JSON fields">Clear</button>
                        @if (Model?.BlobId != null)
                        {
                            <button asp-action="Update" asp-controller="Formatter" type="submit" class="btn btn-primary w-100" data-bs-toggle="tooltip" title="Update the JSON entry">Update</button>
                        }
                        else
                        {
                            <button id="saveJsonBtn" type="button" class="btn btn-primary w-100" onclick="checkWorkspaceAndSave()" data-bs-toggle="tooltip" title="Save the JSON to your workspace">Save</button>
                        }
                    </div>

                    <!-- Formatted JSON Data Column -->
                    <div class="col-5">
                        <h5>Formatted JSON</h5>
                        <textarea id="formattedJson" name="Blob.Output" rows="22" class="form-control" placeholder="Formatted JSON will appear here" required style="width: 100%; height: 500px; resize: none;">@Model?.Blob?.Output</textarea>
                        <div class="mt-2 d-flex justify-content-between">
                            <button id="copyFormattedJsonBtn" type="button" class="btn btn-primary" data-bs-toggle="tooltip" title="Copy the JSON from the Formatted Date">Copy Formatted JSON</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="filenameInputModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filenameInputModalTitle">Enter Filename</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col mb-6">
                        <label class="form-label">Filename</label>
                        <input type="text" id="filenameInput" class="form-control" placeholder="Enter the Filename" required>
                        <span class="text-danger" id="filenameError"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveJsonWithFilename()">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
        // Show tooltip and hide after 2 seconds
        function showTooltip(buttonId) {
            var tooltipElement = document.getElementById(buttonId);
            var tooltip = bootstrap.Tooltip.getInstance(tooltipElement);
            tooltip.show();

            setTimeout(function () {
                tooltip.hide();
            }, 2000);
        }

        function loadJsonFile() {
            const fileInput = document.getElementById('fileInput');
            const inputJsonElement = document.getElementById('inputJson');

            if (fileInput.files.length > 0) {
                const file = fileInput.files[0];
                const reader = new FileReader();

                reader.onload = function (event) {
                    try {
                        const jsonContent = JSON.parse(event.target.result);
                        inputJsonElement.value = JSON.stringify(jsonContent, null, 2); // Pretty-print JSON
                    } catch (e) {
                        alert('Invalid JSON format in the uploaded file.');
                    }
                };

                reader.readAsText(file);
            }
        }

        function checkWorkspaceAndSave() {
            var userId = document.querySelector('input[name="UserId"]').value;
            var workspaceId = document.querySelector('input[name="WorkspaceId"]').value;
            var inputJson = document.getElementById('inputJson').value;
            var outputJson = document.getElementById('formattedJson').value;

            window.jsonDataToSave = {
                userId: userId,
                workspaceId: workspaceId,
                inputJson: inputJson,
                outputJson: outputJson,
                Type: "json"
            };

            var filenameInputModal = new bootstrap.Modal(document.getElementById('filenameInputModal'));
            filenameInputModal.show();
        }

        function saveJsonWithFilename() {
            var filename = document.getElementById('filenameInput').value;
            var filenameError = document.getElementById('filenameError');

            if (!filename) {
                filenameError.textContent = "Filename is required.";
                return;
            } else {
                filenameError.textContent = "";
            }

            var formData = new FormData();
            formData.append("UserId", window.jsonDataToSave.userId);
            formData.append("WorkspaceId", window.jsonDataToSave.workspaceId);
            formData.append("Blob.Type", window.jsonDataToSave.Type);
            formData.append("Blob.Input", window.jsonDataToSave.inputJson);
            formData.append("Blob.Output", window.jsonDataToSave.outputJson);
            formData.append("Filename", filename);

            fetch('/Formatter/Save', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                        showTempDataMessage("JSON saved successfully.", "alert-success");
                    } else {
                        showTempDataMessage("Error saving JSON: " + data.message, "alert-danger");
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showTempDataMessage("An error occurred while saving JSON.", "alert-danger");
                });

            var filenameInputModal = bootstrap.Modal.getInstance(document.getElementById('filenameInputModal'));
            filenameInputModal.hide();
        }

        function showTempDataMessage(message, alertClass) {
            const tempDataMessageElement = document.getElementById('tempDataMessage');
            tempDataMessageElement.className = 'alert ' + alertClass;
            tempDataMessageElement.textContent = message;
            tempDataMessageElement.style.display = 'block';
        }

        let originalJson = ''; // Variable to store the original JSON

        function toggleMinifyUndo() {
            const button = document.getElementById('minifyUndoBtn');
            const inputJsonElement = document.getElementById('inputJson');

            if (button.textContent === 'Minify') {
                originalJson = inputJsonElement.value;

                try {
                    const minifiedJson = JSON.stringify(JSON.parse(originalJson));
                    inputJsonElement.value = minifiedJson;
                    button.textContent = 'Undo';
                } catch (e) {
                    showTempDataMessage('Invalid JSON', 'alert-danger');
                }
            } else {
                inputJsonElement.value = originalJson;
                button.textContent = 'Minify';
            }
        }

        function clearJson() {
            document.getElementById('inputJson').value = '';
            document.getElementById('formattedJson').value = '';
        }
    </script>
}

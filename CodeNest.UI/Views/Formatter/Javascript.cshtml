@using CodeNest.UI.Resources
@model CodeNest.DTO.Models.UserWorkspaceFilesDto
@inject IHttpContextAccessor _httpContextAccessor
@{
    Console.WriteLine(Model);
}
<div class="container-fluid text-center">
    <div class="card">
        <div class="card-header" style="padding:10px">
            @if (ViewData["Success"] != null)
            {
                <div class="alert alert-success" role="alert">
                    @ViewData["Success"]
                </div>
            }
            @if (ViewData["Error"] != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ViewData["Error"]
                </div>
            }
        </div>
        <div class="card-body">
            <form id="jsonForm" method="post">
                <input type="hidden" name="UserId" value="@Model.UserId" />
                <input type="hidden" name="WorkspaceId" value="@Model.WorkspaceId" />
                <input type="hidden" name="BlobId" value="@Model?.Blob?.Id" />
                <input type="hidden" name="Blob.Type" value="@Resource.CN_Type_002" />
                <div class="row">
                    <!-- Input JSON Data Column -->
                    <div class="col-5">
                        <h5>Input </h5>
                        <textarea id="input" name="Blob.Input" rows="22" class="form-control fixed-textarea" placeholder="Enter Javascript data" required>@Model?.Blob?.Input</textarea>
                        <div class="mt-2 d-flex justify-content-between">
                            <button id="copyInputJsonBtn" type="button" class="btn btn-outline-secondary w-48">Copy Input JSON</button>
                            <button id="uploadFileBtn" type="button" class="btn btn-primary w-48" onclick="document.getElementById('fileInput').click()">File Upload</button>
                            <input type="file" id="fileInput" accept=".js" style="display:none;" onchange="handleFileUpload(event)" />
                        </div>
                    </div>

                    <!-- Actions Column -->
                    <div class="col-2">
                        <h5></h5>
                        <br />
                        <br />
                        <br />
                        <div class="d-flex flex-column">
                            <button id="validateBtn" asp-action="Javascript" type="submit" class="btn btn-primary mb-2 w-100">Validate</button>
                            <button id="minifyUndoBtn" type="button" class="btn btn-primary mb-2 w-100" onclick="toggleMinifyUndo()">Minify</button>
                            <button id="clearBtn" type="button" class="btn btn-primary mb-2 w-100" onclick="clearJson()">Clear</button>

                            @if (Model?.BlobId != null)
                            {
                                <button asp-action="Update" asp-controller="Formatter" type="submit" class="btn btn-primary w-100">Update</button>
                            }
                            else
                            {
                                <button id="saveJsonBtn" type="button" class="btn btn-primary w-100" onclick="checkWorkspaceAndSave()">Save</button>
                            }
                        </div>
                    </div>

                    <!-- Formatted JSON Data Column -->
                    <div class="col-5">
                        <h5>Output</h5>
                        <textarea id="formatted" name="Blob.Output" rows="22" class="form-control fixed-textarea" placeholder="Output will appear here">@Model?.Blob?.Output</textarea>
                        <div class="mt-2 d-flex justify-content-between">
                            <button id="copyFormattedJsonBtn" type="button" class="btn btn-outline-secondary w-48">Copy Formatted JSON</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="filenameInputModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filenameInputModalTitle">Enter Filename</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col mb-6">
                        <label class="form-label">Filename</label>
                        <input type="text" id="filenameInput" class="form-control" placeholder="Enter the Filename" required>
                        <span class="text-danger" id="filenameError"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveJsonWithFilename()">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let originalInput = '';

        function extract() {
            const inputTextarea = document.getElementById('input');
            const inputValue = inputTextarea.value;

            // Example of processing the input (you can modify as needed)
            try {
                const jsonData = JSON.parse(inputValue);
                // Process the jsonData as required
                console.log(jsonData); // For demonstration: log to the console

                // If you want to show a success message or update the output textarea
                document.getElementById('formatted').value = JSON.stringify(jsonData, null, 2);
                showTempDataMessage("Data extracted successfully.", "alert-success");
            } catch (err) {
                showTempDataMessage("Invalid JSON format.", "alert-danger");
            }
        }

        function checkWorkspaceAndSave() {
            var userId = document.querySelector('input[name="UserId"]').value;
            var workspaceId = document.querySelector('input[name="WorkspaceId"]').value;
            var input = document.getElementById('input').value;
            var output = document.getElementById('formatted').value;

            // Store values in a global object for later use
            window.DataToSave = {
                userId: userId,
                workspaceId: workspaceId,
                input: input,
                output: output,
                Type: "javascript"
            };

            // Show the filename input modal
            var filenameInputModal = new bootstrap.Modal(document.getElementById('filenameInputModal'));
            filenameInputModal.show();
        }

        function saveJsonWithFilename() {
            var filename = document.getElementById('filenameInput').value;
            var filenameError = document.getElementById('filenameError');

            if (!filename) {
                filenameError.textContent = "Filename is required.";
                return;
            } else {
                filenameError.textContent = "";
            }

            var formData = new FormData();
            formData.append("UserId", window.DataToSave.userId);
            formData.append("WorkspaceId", window.DataToSave.workspaceId);
            formData.append("Blob.Input", window.DataToSave.input);
            formData.append("Blob.Output", window.DataToSave.output);
            formData.append("Blob.Type", window.DataToSave.Type);
            formData.append("Filename", filename);

            fetch('/Formatter/Save', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                        showTempDataMessage("Saved successfully.", "alert-success");
                    } else {
                        showTempDataMessage("Error occurred: " + data.message, "alert-danger");
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showTempDataMessage("An error occurred while saving.", "alert-danger");
                });

            // Hide the modal after saving
            var filenameInputModal = bootstrap.Modal.getInstance(document.getElementById('filenameInputModal'));
            filenameInputModal.hide();
        }

        function toggleMinifyUndo() {
            const inputTextarea = document.getElementById('input');
            const currentInput = inputTextarea.value;

            if (originalInput === '') {
                // Minify
                originalInput = currentInput; // Store original input
                const minified = currentInput
                    .replace(/\/\/.*$/gm, '')          // Remove single-line comments
                    .replace(/\/\*[\s\S]*?\*\//g, '')  // Remove multi-line comments
                    .replace(/\s+/g, ' ')              // Collapse whitespace
                    .replace(/\s*([{};,:])\s*/g, '$1') // Remove whitespace around symbols
                    .trim();
                inputTextarea.value = minified;
                document.getElementById('minifyUndoBtn').textContent = 'Undo';
            } else {
                // Undo
                inputTextarea.value = originalInput;
                originalInput = ''; // Reset original input
                document.getElementById('minifyUndoBtn').textContent = 'Minify';
            }
        }

        function clearJson() {
            document.getElementById('input').value = '';
            document.getElementById('formatted').value = '';
        }

        function showTempDataMessage(message, alertClass) {
            const tempDataMessageElement = document.getElementById('tempDataMessage');
            tempDataMessageElement.textContent = message;
            tempDataMessageElement.className = `alert ${alertClass}`;
            tempDataMessageElement.style.display = 'block';

            setTimeout(() => {
                tempDataMessageElement.style.display = 'none';
            }, 5000); // Hide after 5 seconds
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById('input').value = e.target.result;
                };
                reader.readAsText(file);
            }
        }
    </script>
}
